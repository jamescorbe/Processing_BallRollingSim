////////////////////////////////////////////////////////////
// This class is an example of how you might merge
// a SimObject (in this case a SimSphere) with
// physics capability, stored in the Mover class
// The SimSphereMover is derived from the base-class SimSphere
// and contains a Mover object called "physics".
// The physics object automatically updates the position of the SimSphereMover
// then drawMe() is called.
//

// say you have declares a new SimSphereMover in your code, called mySphereMover
// and given it a radius and startPosition
// Subsequent motion should be generated by calling 
//    mySphereMover.physics.setForce(forcevector);
// You can set the mass, velocity directly by calling
//    mySphereMover.physics.mass = 2;
//    mySphereMover.physics.velocity = velocityVector;
//    



class SimSphereMover extends SimSphere{
  
 public Mover physics;
   
 public SimSphereMover(PVector startPos, float rad) {
    // this calls the base-class SimSphere constructor setting the radius
    super(rad);
    
    // instantiate out Mover class variable, called "physics"
    physics = new Mover();
    
    // move the SimSphereMover to its start position
    setTransformAbs(1,0,0,0, startPos);
    
    // set the location of the physics object to be the same as the 
    // SimSphereMover
    physics.location = this.getOrigin();
    physics.radius = this.getRadius();
  }
  
  
  public void drawMe(){
    // updates the physics (if you applied any forces etc)
    // this then works out the new position of the SimSphereMover
    physics.update();
    
    // sets the SimSphereMover to the physics' location
    setTransformAbs(1,0,0,0, physics.location);
    
    // calls the base-class SimSphere's drawMe stuff, to do the rest of th drawing
    super.drawMe();
  }
  
  
  
}
